{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Madlib",
  "patterns": [
    {
      "include": "#function-calls"
    },
    { "include": "#jsx" },
    {
      "include": "#types"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    { "include": "#jscode" },
    
    {
      "include": "#keywords"
    },
    {
      "include": "#interface"
    },
    {
      "include": "#where"
    },
    {
      "include": "#variable-decls"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#function-defs"
    },
    {
      "include": "#access"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.madlib",
          "match": "\\b(if|else|where|is|import|type|export|from|return|instance)\\b"
        },
        {
          "match": "\\s*(>=|<=|==|!=|<|>|\\?|\\:|=>|\\+|\\*|\\-|\\/(?!/))\\s*",
          "name": "keyword.control.madlib"
        }
      ]
    },
    "template-interpolation": {
      "patterns": [
        {
          "match": "\\$\\{([^`]*)\\}??",
          "captures": {
            "1": {
              "patterns": [{ "include": "source.mad" }]
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "contentName": "string.quoted.double.madlib",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.madlib",
              "match": "\\\\."
            }
          ]
        },
        {
          "contentName": "string.quoted.single.madlib",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.madlib",
              "match": "\\\\."
            }
          ]
        },
        {
          "contentName": "string.template.madlib",
          "begin": "`",
          "end": "`",
          "patterns": [
            { "include": "#template-interpolation" },
            {
              "name": "constant.character.escape.madlib",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.madlib",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.numeric.decimal.madlib",
          "match": "\\b([0-9]|\\.)+\\b"
        }
      ]
    },
    "variable-decls": {
      "patterns": [
        {
          "match": "\\s*\\b([a-zA-Z0-9]+)\\b\\s*=(?!=)",
          "captures": {
            "1": { "name": "variable.other.constant.madlib" }
          }
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "begin": "\\s*([a-zA-Z]+[a-zA-Z0-9_]*)\\(",
          "end": "\\)",
          "contentName": "source.mad",
          "patterns": [
            {
              "match": "[,.]"
            },
            {
              "include": "source.mad"
            }
          ],
          "beginCaptures": {
            "1": {
              "patterns": [
                { "match": "[a-z]+[A-Za-z0-9]*", "name": "entity.name.function.madlib" },
                {
                  "match": "([A-Z]+[A-Za-z0-9]*)",
                  "captures": {
                    "1": { "name": "constant.other.madlib" }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "function-defs": {
      "patterns": [
        {
          "match": "[ ]*\\(([a-zA-Z0-9_, ]+)\\)\\s+(\\=\\>)",
          "captures": {
            "1": {
              "name": "variable.parameter.madlib",
              "patterns": [
                {
                  "name": "constant.character.escape.madlib",
                  "match": "\\,"
                }
              ]
            },
            "2": { "name": "keyword.operator.double-colon.madlib" }
          }
        },
        {
          "match": "\\(([a-zA-Z0-9_, ]+)\\)\\s+(=>)\\s+(.*)",
          "captures": {
            "1": {
              "name": "variable.parameter.madlib",
              "patterns": [
                {
                  "name": "constant.character.escape.madlib",
                  "match": "\\,"
                }
              ]
            },
            "2": { "name": "keyword.operator.double-colon.madlib" },
            "3": { 
              "patterns": [
                { "include": "#strings" },
                { "include": "#function-defs" },
                { "include": "#function-calls" },
                { "include": "#access" },
                { "include": "#constants" },
                { "include": "#jscode" },
                { "include": "#jsx" },
                { "include": "#where" }
              ]
             }
          }
        },
        {
          "match": "\\s*([a-zA-Z0-9_]+)[ ]*=[ ]*\\(([a-zA-Z_, ]+)\\)[ ]*(=>)",
          "captures": {
            "1": { "name": "entity.name.function.madlib" },
            "2": {
              "name": "variable.parameter.madlib",
              "patterns": [
                {
                  "name": "constant.character.escape.madlib",
                  "match": "\\,"
                }
              ]
            },
            "3": { "name": "keyword.operator.double-colon.madlib" },
            "4": {
              "patterns": [
                { "include": "#strings" },
                { "include": "#function-calls" },
                { "include": "#access" },
                { "include": "#constants" },
                { "include": "#jscode" },
                { "include": "#jsx" },
                { "include": "#where" }
              ]
             }
          }
        },
        {
          "match": "([a-zA-Z0-9]+)\\s*(::)([^,]*)",
          "captures": {
            "1": { "name": "entity.name.function.madlib" },
            "2": { "name": "keyword.operator.double-colon.madlib" },
            "3": {
              "patterns": [
                { "name": "storage.type.madlib", "match": "[A-Z]+[A-Za-z0-9]*" },
                { "name": "keyword.operator.arrow.madlib", "match": "->" },
                { "name": "keyword.operator.arrow.madlib", "match": "=>" }
              ]
            }
          },
          "name": "meta.function.type-declaration.madlib"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "->",
          "name": "keyword.operator.arrow.madlib"
        },
        {
          "match": "\\.\\.\\.",
          "name": "keyword.operator.arrow.madlib"
        },
        {
          "match": ":",
          "name": "keyword.operator.arrow.madlib"
        },
        {
          "match": "<",
          "name": "keyword.operator.arrow.madlib"
        },
        {
          "match": ">",
          "name": "keyword.operator.arrow.madlib"
        },
        {
          "match": "\\|>",
          "name": "keyword.operator.arrow.madlib"
        },
        {
          "match": "::",
          "name": "keyword.operator.double-colon.madlib"
        },
        {
          "match": "(\\|\\s|=\\s)?\\b[A-Z0-9_]+\\b",
          "name": "constant.other.madlib"
        },
        {
          "match": "=?\\s*\\b([A-Z]+[a-zA-Z0-9]*)\\b",
          "captures": { "1": { "name": "constant.other.madlib" } }
        },
        {
          "match": "\\|\\s*\\b([A-Z]+[a-zA-Z0-9]*)\\b",
          "captures": { "1": { "name": "constant.other.madlib" } }
        },
        {
          "match": "(type|alias)\\s+\\b([A-Z]+[A-Za-z0-9]*)\\b\\s*.*\\s*=\\s*(.*)",
          "captures": {
            "1": { "name": "keyword.control.madlib" },
            "2": { "name": "storage.type.madlib" },
            "3": {
              "patterns": [
                { "include": "#types" },
                {
                  "name": "constant.other.madlib",
                  "match": "\\b[A-Z]+[A-Za-z0-9]*\\b"
                },
                {
                  "name": "keyword.operator.pipe.madlib",
                  "match": "\\|"
                }
              ]
            }
          },
          "patterns": [
            {
              "match": "\\b([A-Z]+[A-Za-z0-9]*)\\b",
              "captures": {
                "1": { "name": "constant.other.madlib" }
              }
            }
          ]
        },
        {
          "match": "(type)\\s+\\b([A-Z]+[A-Za-z0-9]*)\\b.*",
          "captures": {
            "1": { "name": "keyword.control.madlib" },
            "2": { "name": "storage.type.madlib" }
          },
          "patterns": [
            {
              "match": "\\b([A-Z]+[A-Za-z0-9]*)\\b",
              "captures": {
                "1": { "name": "constant.other.madlib" }
              }
            }
          ]
        }
      ]
    },
    "where": {
      "patterns": [{
        "match": "(where)\\((.*)\\)[ ]*\\{",
        "captures": {
          "2": {
            "patterns": [
              { "include": "#function-calls" },
              { "include": "#function-defs" },
              { "include": "#strings" },
              { "include": "#constants" },
              { "include": "#types" },
              { "include": "#access" },
              { "include": "#where" },
              { "include": "#jscode" },
              { "include": "#tuples" }
            ]
          }
        }
      },
      {
        "match": "[ ]*\\(?([a-zA-Z0-9_, ]+)\\)?\\s+(\\=\\>)",
        "captures": {
          "1": {
            "name": "variable.parameter.madlib",
            "patterns": [
              {
                "match": "\\b[A-Z]+[a-zA-Z0-9_]*\\b",
                "name": "variable.other.constant.madlib"
              },
              {
                "name": "constant.character.escape.madlib",
                "match": "\\,"
              }
            ]
          },
          "2": { "name": "keyword.operator.double-colon.madlib" }
        }
      }]
    },
    "access": {
      "patterns": [
        {
          "match": "([.*].*)",
          "patterns": [
            { "include": "#function-calls" },
            { "include": "#function-defs" },
            { "include": "#strings" },
            { "include": "#constants" },
            { "include": "#types" },
            { "include": "#access" },
            { "include": "#where" },
            { "include": "#jscode" }
          ]
        },
        {
          "match": "\\b([A-Z]+[A-Za-z0-9]*)\\b\\.([a-z]+[a-zA-Z0-9]*\\(?.*\\)?)",
          "captures": {
            "1": { "name": "variable.other.constant.madlib" },
            "2": {
              "patterns": [
                { "include": "#where" },
                { "include": "#strings" },
                { "include": "#keywords" },
                { "include": "#types" },
                { "include": "#function-calls" },
                { "include": "#function-defs" },
                { "match": "\\b[A-Z]+[A-Za-z0-9]*\\b", "name": "variable.other.constant.madlib" }
              ]
            }
          }
        },
        {
          "match": "\\b([A-Z]+[A-Za-z0-9]*)\\b\\.([A-Z]+[a-zA-z0-9]*)",
          "captures": {
            "1": { "name": "variable.other.constant.madlib" },
            "2": {
              "patterns": [
                {
                  "match": "([a-z]+[a-zA-Z0-9]*)\\((.*)\\)",
                  "captures": {
                    "1": {
                      "name": "entity.name.function.madlib"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#access"
                        },
                        { "include": "#where" },
                        { "include": "#strings" },
                        { "include": "#keywords" },
                        { "include": "#function-defs" }
                      ]
                    }
                  }
                },
                { "match": "\\b[A-Z]+[A-Za-z0-9]*\\b", "name": "storage.type.madlib" }
              ]
            }
          }
        },
        {
          "match": "\\b([A-Z]+[A-Za-z0-9]*)\\b\\.(.*)",
          "captures": {
            "2": {
              "patterns": [{ "include": "#where" }]
            }
          }
        }
      ]
    },
    "interface": {
      "patterns": [
        {
          "match": "(interface|instance)\\s+(.*)\\s+(=>)\\s+(.*)",
          "captures": {
            "1": {
              "name": "keyword.control.madlib"
            },
            "2": {
              "patterns": [{ "include": "#interface" }]
            },
            "3": {
              "name": "keyword.control.madlib"
            },
            "4": {
              "patterns": [{ "include": "#interface" }]
            }
          }
        },
        {
          "match": "(interface|instance)\\s+(.*)",
          "captures": {
            "1": {
              "name": "keyword.control.madlib"
            },
            "2": {
              "patterns": [{ "include": "#interface" }]
            }
          }
        },
        {
          "match": "\\s*(=>)\\s*(.*)?",
          "disabled": 1,
          "captures": {
            "1": { "patterns": [{ "include": "#interface" }] },
            "2": { "name": "keyword.control.madlib" },
            "3": { "patterns": [{ "include": "#interface" }] }
          }
        },
        {
          "match": "\\b([A-Z]+[A-Za-z0-9]*)\\b\\s\\(?([A-Z]+[A-Za-z0-9]*)?",
          "captures": {
            "1": { "name": "storage.type.madlib" },
            "2": { "name": "constant.other.madlib" }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "(//.*)",
          "captures": {
            "1": { "name": "comment.line.double-slash.madlib" }
          }
        },
        {
          "contentName": "comment.block.js",
          "begin": "\\s*+((/\\*))",
          "end": "(\\s*(\\*/))",
          "captures": {
            "1": {
              "name": "comment.block.js"
            },
            "2": {
              "name": "punctuation.definition.comment.js"
            }
          },
          "patterns": [{ "match": "@\\w*", "name": "storage.type.class.jsdoc" }]
        }
      ]
    },
    "jscode": {
      "name": "js.block.mad",
      "begin": "(.*)#\\-(?!\\-#)",
      "end": "(.*)\\-#",
      "contentName": "meta.embedded.block.javascript",
      "endCaptures": {
        "1": {
          "name": "meta.embedded.block.javascript",
          "patterns": [
            {
              "name": "meta.embedded.block.javascript",
              "include": "source.js"
            }
          ]
        }
      },
      "beginCaptures": {
        "1": {
          "patterns": [{ "include": "source.mad" }]
        },
        "2": {
          "patterns": [{ "include": "source.js" }]
        }
      },
      "patterns": [{ "include": "source.js" }]
    },
    "jsx": {
      "comment": "Avoid < operator expressions as best we can using Zertosh's regex",
      "patterns": [
        {
          "begin": "(?<=\\(|{|\\[|&&|\\|\\||\\?|:|=|=>|\\Wreturn|^return|^)\\s*+(?=<([^,]|[ ]*|\\{.*\\})+$|<\\s*>)",
          "end": "(?=.)",
          "applyEndPatternLast": 1,
          "patterns": [
            {
              "include": "#jsx-tag-element-name"
            }
          ]
        }
      ]
    },
    "jsx-tag-element-name": {
      "patterns": [
        {
          "comment": "JSX Fragment",
          "name": "meta.tag.jsx",
          "contentName": "JSXAttrs",
          "begin": "\\s*+(<)\\s*(?=>)",
          "end": "(?<=</)(>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.jsx"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.jsx"
            }
          },
          "patterns": [
            {
              "include": "#jsx-tag-termination"
            }
          ]
        },
        {
          "comment": "Tags that end > are trapped in #jsx-tag-termination",
          "name": "meta.tag.jsx",
          "contentName": "JSXAttrs",
          "begin": "\\s*+(<)((\\p{Ll}[\\p{Ll}0-9]*)|((?:[$_\\p{L}\\p{Nl}][$_\\p{L}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Nl}\\p{Pc}-]*?:)?+(?:[$_\\p{L}\\p{Nl}](?:[$_\\p{L}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Nl}\\p{Pc}\\.-](?<!\\.\\.))*+)+))(?=[ />\\s])(?![:])(?<!\\.|:)",
          "end": "\\s*(?<=</)((\\4)|\\2)(>)|(/>)|((?<=</)[\\S ]*?)>",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.jsx"
            },
            "2": {
              "name": "entity.name.tag.open.jsx"
            },
            "4": {
              "name": "support.class.component.open.jsx"
            }
          },
          "endCaptures": {
            "1": {
              "name": "entity.name.tag.close.jsx"
            },
            "2": {
              "name": "support.class.component.close.jsx"
            },
            "3": {
              "name": "punctuation.definition.tag.jsx"
            },
            "4": {
              "name": "punctuation.definition.tag.jsx"
            },
            "5": {
              "name": "invalid.illegal.termination.jsx"
            }
          },
          "patterns": [
            {
              "include": "#jsx-tag-termination"
            },
            {
              "include": "#jsx-tag-attributes"
            }
          ]
        }
      ]
    },
    "jsx-tag-termination": {
      "patterns": [
        {
          "comment": "uses non consuming search for </ in </tag>",
          "contentName": "JSXNested",
          "begin": "(>)",
          "end": "(</)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.tag.jsx"
            },
            "1": {
              "name": "JSXStartTagEnd"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.jsx"
            },
            "1": {
              "name": "JSXEndTagStart"
            }
          },
          "patterns": [
            {
              "include": "#jsx-evaluated-code"
            },
            {
              "include": "#jsx-entities"
            },
            {
              "include": "#jsx-tag-element-name"
            }
          ]
        }
      ]
    },
    "jsx-tag-attributes": {
      "patterns": [
        {
          "include": "#jsx-attribute-name"
        },
        {
          "include": "#jsx-assignment"
        },
        {
          "include": "#jsx-string-double-quoted"
        },
        {
          "include": "#jsx-string-single-quoted"
        },
        {
          "include": "#jsx-evaluated-code"
        },
        {
          "include": "#jsx-tag-element-name"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "jsx-spread-attribute": {
      "patterns": [
        {
          "comment": "Spread attribute { ... AssignmentExpression }",
          "match": "(?<!\\.)\\.\\.\\.",
          "name": "keyword.operator.spread.jsx"
        }
      ]
    },
    "jsx-attribute-name": {
      "patterns": [
        {
          "comment": "look for attribute name",
          "match": "(?<!\\S)([$_\\p{L}](?:[$.\\p{L}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Nl}\\p{Pc}-](?<!\\.\\.))*+)(?<!\\.)(?=//|/\\*|=|\\s|>|/>)",
          "captures": {
            "0": {
              "name": "entity.other.attribute-name.jsx"
            }
          }
        }
      ]
    },
    "jsx-assignment": {
      "patterns": [
        {
          "comment": "look for attribute assignment",
          "name": "keyword.operator.assignment.jsx",
          "match": "=(?=\\s*(?:'|\"|{|/\\*|<|//|\\n))"
        }
      ]
    },
    "jsx-string-double-quoted": {
      "name": "string.quoted.double.js",
      "begin": "\"",
      "end": "\"(?<!\\\\\")",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.jsx"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.jsx"
        }
      },
      "patterns": [
        {
          "include": "#jsx-entities"
        }
      ]
    },
    "jsx-string-single-quoted": {
      "name": "string.quoted.single.js",
      "begin": "'",
      "end": "'(?<!\\\\')",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.jsx"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.jsx"
        }
      },
      "patterns": [
        {
          "include": "#jsx-entities"
        }
      ]
    },
    "jsx-evaluated-code": {
      "patterns": [
        {
          "name": "meta.embedded.expression.mad",
          "contentName": "source.mad",
          "begin": "{",
          "end": "}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.embedded.begin.jsx"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.embedded.end.jsx"
            }
          },
          "patterns": [
            {
              "include": "source.mad"
            },
            {
              "include": "#jsx-string-double-quoted"
            },
            {
              "include": "#jsx-string-single-quoted"
            },
            {
              "include": "#jsx-spread-attribute"
            }
          ]
        }
      ]
    },
    "jsx-entities": {
      "patterns": [
        {
          "comment": "Embeded HTML entities &blah",
          "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
          "captures": {
            "0": {
              "name": "constant.character.entity.jsx"
            },
            "1": {
              "name": "punctuation.definition.entity.jsx"
            },
            "2": {
              "name": "entity.name.tag.html.jsx"
            },
            "3": {
              "name": "punctuation.definition.entity.jsx"
            }
          }
        },
        {
          "comment": "Entity with & and invalid name",
          "match": "&\\s*+;",
          "name": "invalid.illegal.bad-ampersand.jsx"
        }
      ]
    }
  },
  "scopeName": "source.mad"
}
